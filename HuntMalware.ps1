<#
.Synopsis
   Scope a system for files based on any combination of attributes.
.DESCRIPTION
   This script can be deployed via Invoke-Command to launch against 
   an entire domain to find files quickly during incident response.
   It's functionality is simple. It builds out a Get-ChildItem command
   without requiring knowledge of formatting or sytax that may be
   easier to use for those less familiar with PowerShell.
.EXAMPLE
   Hunt-Malware -StartLocation C:\users\yaboygmoney -Size 12345 -LastWriteTime 6/22/2020
.EXAMPLE
   Hunt-Malware badfile.exe
#>
function Hunt-Malware
{
    [CmdletBinding()]
    [Alias()]
    [OutputType([int])]
    Param
    (
        # The filename you are looking for
        [Parameter(Mandatory=$false,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        $FileName,

        # The size of the file you are looking for in bytes.
        [int]$Size,

        # The SHA256 hash of the file you are looking for.
        [string]$SHA256,

        # The modified timestamp. Format is Short Date e.g. 4/4/2020 not 04/04/2020.
        [datetime]$LastWriteTime,

        #The full path of the file you are looking for.
        [string]$FilePath,

        #The directory from which to begin the search. If not set, it will begin from the working directory.
        [string]$StartLocation
    )

    Begin
    {
        $hostname = hostname
        Write-Output "[*] Beginning hunt on $hostname"
        $command = 'Get-ChildItem -Recurse -File -Force -ErrorAction SilentlyContinue '
    }
    Process
    {
        if ($PSBoundParameters.ContainsKey('StartLocation')) {
            if (Test-Path $StartLocation)
            {
                $command = $command + '-Path $startLocation '
            }
            else
            {
                Write-Error "Specified StartLocation path does not exist"
                break
            }

        }

        if ($PSBoundParameters.ContainsKey('filepath')) {
            $command = $command + '| Where-Object {$_.FullName -eq $fullpath } '
        }

        if ($PSBoundParameters.ContainsKey('size')) {
            $command = $command + '| Where-Object { $_.Length -eq $size } '
        }

        if ($PSBoundParameters.ContainsKey('SHA256')) {
            $command = $command + '| Where-Object { ( Get-FileHash -Path $_.FullName ).Hash -eq $SHA256 } '
        }

        if ($PSBoundParameters.ContainsKey('LastWriteTime')) {
            $command = $command + '| Where-Object { $_.LastWriteTime.ToShortDateString() -like $LastWriteTime.ToShortDateString() } '
        }

        if ($PSBoundParameters.ContainsKey('filename')) {
            $command = $command + '| Where-Object { $_.Name -like $filename } '
        }
    }
    End
    {
        Invoke-Expression $command | Select FullName,Length,CreationTime,LastAccessTime,LastWriteTime,@{l="SHA256";e={(Get-FileHash -Path $_.FullName).Hash}} | Ft -AutoSize -Wrap
        Write-Output "[*] End of hunt on $hostname"
    }
}